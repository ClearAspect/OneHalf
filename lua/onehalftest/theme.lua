
local c = require('onehalftest.palette')

local hl = vim.api.nvim_set_hl
local theme = {}

theme.set_highlights = function()

  -- highlights
  hl(0, "Normal", { fg = c.fg, bg = c.bg })
  hl(0, "Cursor", { fg = c.bg, bg = c.blue })
  hl(0, "CursorColumn", { fg = 'NONE', bg = c.cursor_line })
  hl(0, "CursorLine", { fg = 'NONE', bg = c.cursor_line })
  hl(0, "LineNr", { fg = c.gutter_fg, bg = c.gutter_bg })
  hl(0, "CursorLineNr", { fg = c.fg, bg = 'NONE' })
  hl(0, "DiffAdd", { fg = c.green, bg = 'NONE' })
  hl(0, "DiffChange", { fg = c.yellow, bg = 'NONE' })
  hl(0, "DiffDelete", { fg = c.red, bg = 'NONE' })
  hl(0, "DiffText", { fg = c.blue, bg = 'NONE' })
  hl(0, "IncSearch", { fg = c.bg, bg = c.yellow })
  hl(0, "Search", { fg = c.bg, bg = c.yellow })
  hl(0, "ErrorMsg", { fg = c.fg, bg = 'NONE' })
  hl(0, "ModeMsg", { fg = c.fg, bg = 'NONE' })
  hl(0, "MoreMsg", { fg = c.fg, bg = 'NONE' })
  hl(0, "WarningMsg", { fg = c.red, bg = 'NONE' })
  hl(0, "Question", { fg = c.magenta, bg = 'NONE' })
  hl(0, "Pmenu", { fg = c.bg, bg = c.fg })
  hl(0, "PmenuSel", { fg = c.fg, bg = c.blue })
  hl(0, "PmenuSbar", { fg = c.selection, bg = 'NONE' })
  hl(0, "PmenuThumb", { fg = c.fg, bg = 'NONE' })
  hl(0, "SpellBad", { fg = c.red, bg = 'NONE' })
  hl(0, "SpellCap", { fg = c.yellow, bg = 'NONE' })
  hl(0, "SpellLocal", { fg = c.yellow, bg = 'NONE' })
  hl(0, "SpellRare", { fg = c.yellow, bg = 'NONE' })
  hl(0, "TabLine", { fg = c.comment_fg, bg = c.cursor_line })
  hl(0, "TabLineFill", { fg = c.comment_fg, bg = c.cursor_line })
  hl(0, "TabLineSel", { fg = c.fg, bg = c.bg })
  hl(0, "Visual", { fg = 'NONE', bg = c.selection })
  hl(0, "VisualNOS", { fg = 'NONE', bg = c.selection })
  hl(0, "ColorColumn", { fg = 'NONE', bg = c.color_col })
  hl(0, "Conceal", { fg = c.fg, bg = 'NONE' })
  hl(0, "Directory", { fg = c.blue, bg = 'NONE' })
  hl(0, "VertSplit", { fg = c.vertsplit, bg = c.vertsplit })
  hl(0, "Folded", { fg = c.fg, bg = 'NONE' })
  hl(0, "FoldColumn", { fg = c.fg, bg = 'NONE' })
  hl(0, "SignColumn", { fg = c.fg, bg = 'NONE' })
  hl(0, "MatchParen", { fg = c.blue, bg = 'NONE', underline=true, })
  hl(0, "SpecialKey", { fg = c.fg, bg = 'NONE' })
  hl(0, "Title", { fg = c.green, bg = 'NONE' })
  hl(0, "WildMenu", { fg = c.fg, bg = 'NONE' })
  hl(0, "Whitespace", { fg = c.non_text, bg = 'NONE' })
  hl(0, "NonText", { fg = c.non_text, bg = 'NONE' })
  hl(0, "Comment", { fg = c.comment_fg, bg = 'NONE', italic=true, })
  hl(0, "Constant", { fg = c.cyan, bg = 'NONE' })
  hl(0, "String", { fg = c.green, bg = 'NONE' })
  hl(0, "Character", { fg = c.green, bg = 'NONE' })
  hl(0, "Number", { fg = c.yellow, bg = 'NONE' })
  hl(0, "Boolean", { fg = c.yellow, bg = 'NONE' })
  hl(0, "Float", { fg = c.yellow, bg = 'NONE' })
  hl(0, "Identifier", { fg = c.red, bg = 'NONE' })
  hl(0, "Function", { fg = c.blue, bg = 'NONE' })
  hl(0, "Statement", { fg = c.magenta, bg = 'NONE' })
  hl(0, "Conditional", { fg = c.magenta, bg = 'NONE' })
  hl(0, "Repeat", { fg = c.magenta, bg = 'NONE' })
  hl(0, "Label", { fg = c.magenta, bg = 'NONE' })
  hl(0, "Operator", { fg = c.fg, bg = 'NONE' })
  hl(0, "Keyword", { fg = c.red, bg = 'NONE' })
  hl(0, "Exception", { fg = c.magenta, bg = 'NONE' })
  hl(0, "PreProc", { fg = c.yellow, bg = 'NONE' })
  hl(0, "Include", { fg = c.magenta, bg = 'NONE' })
  hl(0, "Define", { fg = c.magenta, bg = 'NONE' })
  hl(0, "Macro", { fg = c.magenta, bg = 'NONE' })
  hl(0, "PreCondit", { fg = c.yellow, bg = 'NONE' })
  hl(0, "Type", { fg = c.yellow, bg = 'NONE' })
  hl(0, "StorageClass", { fg = c.yellow, bg = 'NONE' })
  hl(0, "Structure", { fg = c.yellow, bg = 'NONE' })
  hl(0, "Typedef", { fg = c.yellow, bg = 'NONE' })
  hl(0, "Special", { fg = c.blue, bg = 'NONE' })
  hl(0, "SpecialChar", { fg = c.fg, bg = 'NONE' })
  hl(0, "Tag", { fg = c.fg, bg = 'NONE' })
  hl(0, "Delimiter", { fg = c.fg, bg = 'NONE' })
  hl(0, "SpecialComment", { fg = c.fg, bg = 'NONE' })
  hl(0, "Debug", { fg = c.fg, bg = 'NONE' })
  hl(0, "Underlined", { fg = c.fg, bg = 'NONE' })
  hl(0, "Ignore", { fg = c.fg, bg = 'NONE' })
  hl(0, "Error", { fg = c.red, bg = c.gutter_bg })
  hl(0, "Todo", { fg = c.magenta, bg = 'NONE' })
  hl(0, "Variable", { fg = c.red, bg = 'NONE' })
  hl(0, "Bold", { fg = 'NONE', bg = 'NONE', bold=true, })
  hl(0, "Italic", { fg = 'NONE', bg = 'NONE', italic=true, })

  -- Treesitter
  hl(0, "TSText", { fg = c.fg, bg = 'NONE' })
  hl(0, "TSComment", { link = 'Comment' })
  hl(0, "TSConstant", { link = 'Constant' })
  hl(0, "TSConstMacro", { link = 'Constant' })
  hl(0, "TSString", { link = 'String' })
  hl(0, "TSStringRegex", { link = 'String' })
  hl(0, "TSStringEscape", { link = 'String' })
  hl(0, "TSCharacter", { link = 'Character' })
  hl(0, "TSNumber", { link = 'Number' })
  hl(0, "TSBoolean", { link = 'Boolean' })
  hl(0, "TSFloat", { link = 'Float' })
  hl(0, "TSFunction", { link = 'Function' })
  hl(0, "TSFuncBuiltin", { link = 'Function' })
  hl(0, "TSFuncMacro", { link = 'Function' })
  hl(0, "TSMethod", { link = 'Function' })
  hl(0, "TSConditional", { link = 'Conditional' })
  hl(0, "TSRepeat", { link = 'Repeat' })
  hl(0, "TSLabel", { link = 'Label' })
  hl(0, "TSOperator", { link = 'Operator' })
  hl(0, "TSKeyword", { link = 'Keyword' })
  hl(0, "TSKeywordReturn", { link = 'Keyword' })
  hl(0, "TSKeywordFunction", { link = 'Keyword' })
  hl(0, "TSException", { link = 'Exception' })
  hl(0, "TSInclude", { link = 'Include' })
  hl(0, "TSType", { link = 'Type' })
  hl(0, "TSTypeBuiltin", { link = 'Type' })
  hl(0, "TSStructure", { link = 'Structure' })
  hl(0, "TSPunctSpecial", { link = 'Special' })
  hl(0, "TSTag", { link = 'Tag' })
  hl(0, "TSPunctDelimiter", { link = 'Delimiter' })
  hl(0, "TSUnderline", { link = 'Underlined' })
  hl(0, "TSError", { link = 'Error' })
  hl(0, "TSVariable", { link = 'Variable' })
  hl(0, "TSVariableBuiltin", { link = 'Variable' })

  -- markdown

  -- Whichkey
  hl(0, "WhichKey", { fg = c.magenta, bg = 'NONE' })
  hl(0, "WhichKeySeperator", { fg = c.green, bg = 'NONE' })
  hl(0, "WhichKeyGroup", { fg = c.blue, bg = 'NONE' })
  hl(0, "WhichKeyDesc", { fg = c.blue, bg = 'NONE' })
  hl(0, "WhichKeyFloat", { fg = 'NONE', bg = c.black })

  -- Git
  hl(0, "SignAdd", { fg = c.sign_add, bg = 'NONE' })
  hl(0, "SignChange", { fg = c.sign_change, bg = 'NONE' })
  hl(0, "SignDelete", { fg = c.sign_delete, bg = 'NONE' })
  hl(0, "GitSignsAdd", { fg = c.sign_add, bg = 'NONE' })
  hl(0, "GitSignsChange", { fg = c.sign_change, bg = 'NONE' })
  hl(0, "GitSignsDelete", { fg = c.sign_delete, bg = 'NONE' })

  -- LSP
  hl(0, "LspDiagnosticsDefaultError", { fg = c.red, bg = 'NONE' })
  hl(0, "LspDiagnosticsDefaultWarning", { fg = c.light_red, bg = 'NONE' })
  hl(0, "LspDiagnosticsDefaultInformation", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsDefaultInfo", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsDefaultHint", { fg = c.blue, bg = 'NONE' })
  hl(0, "LspDiagnosticsVirtualTextError", { fg = c.red, bg = 'NONE' })
  hl(0, "LspDiagnosticsVirtualTextWarning", { fg = c.light_red, bg = 'NONE' })
  hl(0, "LspDiagnosticsVirtualTextInformation", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsVirtualTextInfo", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsVirtualTextHint", { fg = c.blue, bg = 'NONE' })
  hl(0, "LspDiagnosticsFloatingError", { fg = c.red, bg = 'NONE' })
  hl(0, "LspDiagnosticsFloatingWarning", { fg = c.light_red, bg = 'NONE' })
  hl(0, "LspDiagnosticsFloatingInformation", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsFloatingInfo", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsFloatingHint", { fg = c.blue, bg = 'NONE' })
  hl(0, "DiagnosticSignError", { fg = c.red, bg = 'NONE' })
  hl(0, "DiagnosticSignWarning", { fg = c.light_red, bg = 'NONE' })
  hl(0, "DiagnosticSignInformation", { fg = c.yellow, bg = 'NONE' })
  hl(0, "DiagnosticSignInfo", { fg = c.yellow, bg = 'NONE' })
  hl(0, "DiagnosticSignHint", { fg = c.blue, bg = 'NONE' })
  hl(0, "LspDiagnosticsSignError", { fg = c.red, bg = 'NONE' })
  hl(0, "LspDiagnosticsSignWarning", { fg = c.light_red, bg = 'NONE' })
  hl(0, "LspDiagnosticsSignInformation", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsSignInfo", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsSignHint", { fg = c.blue, bg = 'NONE' })
  hl(0, "LspDiagnosticsError", { fg = c.red, bg = 'NONE' })
  hl(0, "LspDiagnosticsWarning", { fg = c.light_red, bg = 'NONE' })
  hl(0, "LspDiagnosticsInformation", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsInfo", { fg = c.yellow, bg = 'NONE' })
  hl(0, "LspDiagnosticsHint", { fg = c.blue, bg = 'NONE' })
  hl(0, "LspDiagnosticsUnderlineError", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "LspDiagnosticsUnderlineWarning", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "LspDiagnosticsUnderlineInformation", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "LspDiagnosticsUnderlineInfo", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "LspDiagnosticsUnderlineHint", { fg = 'NONE', bg = 'NONE', underline=true, })
  hl(0, "LspReferenceRead", { fg = 'NONE', bg = c.light_black })
  hl(0, "LspReferenceText", { fg = 'NONE', bg = c.light_black })
  hl(0, "LspReferenceWrite", { fg = 'NONE', bg = c.light_black })
  hl(0, "LspCodeLens", { fg = c.light_black, bg = 'NONE', italic=true, })
  hl(0, "LspCodeLensSeparator", { fg = c.light_black, bg = 'NONE', italic=true, })

  -- Telescope
  hl(0, "TelescopeSelection", { fg = c.blue, bg = 'NONE' })
  hl(0, "TelescopeMatching", { fg = c.yellow, bg = 'NONE', bold=true, })
  hl(0, "TelescopeBorder", { fg = c.blue, bg = c.bg })

  -- NvimTree

  -- Buffer

  -- StatusLine
  hl(0, "StatusLine", { fg = c.blue, bg = c.cursor_line })
  hl(0, "StatusLineNC", { fg = c.comment_fg, bg = c.cursor_line })
  hl(0, "StatusLineSeparator", { fg = c.black, bg = 'NONE' })
  hl(0, "StatusLineTerm", { fg = c.black, bg = 'NONE' })
  hl(0, "StatusLineTermNC", { fg = c.black, bg = 'NONE' })

  -- IndentBlankline

  -- Dashboard

  -- Cmp
  hl(0, "CmpItemAbbr", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKind", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemMenu", { fg = c.fg, bg = c.bg })
  hl(0, "CmpItemKindCopilot", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemAbbrDeprecated", { fg = c.comment_fg, bg = 'NONE', strikethrough=true, })
  hl(0, "CmpItemAbbrMatch", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemAbbrMatchFuzzy", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindFunction", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindMethod", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindConstructor", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindClass", { link = 'Structure' })
  hl(0, "CmpItemKindEnum", { link = 'Type' })
  hl(0, "CmpItemKindEvent", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindInterface", { link = 'Structure' })
  hl(0, "CmpItemKindStruct", { link = 'Structure' })
  hl(0, "CmpItemKindVariable", { link = 'Variable' })
  hl(0, "CmpItemKindField", { link = 'Variable' })
  hl(0, "CmpItemKindProperty", { link = 'Variable' })
  hl(0, "CmpItemKindEnumMember", { link = 'Constant' })
  hl(0, "CmpItemKindConstant", { link = 'Constant' })
  hl(0, "CmpItemKindKeyword", { link = 'Keyword' })
  hl(0, "CmpItemKindModule", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindValue", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindUnit", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindText", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindSnippet", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindFile", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindFolder", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindColor", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindReference", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindOperator", { fg = c.fg, bg = 'NONE' })
  hl(0, "CmpItemKindTypeParameter", { fg = c.fg, bg = 'NONE' })
end

return theme